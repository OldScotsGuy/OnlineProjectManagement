<?php
/**
 * Created by Nick Harle
 * Date: 23/02/2019
 * Time: 21:24
 *
 * This object generates the Gantt Chart from the data generated by the GanttController object
 * The html presentation can be changed without changing teh Controller object
 *
 * The controller object checks to see if the user can edit / delete tasks, and if so these links are included
 */

namespace View;

require_once("Objects/Controller/GanttController.php");

use Controller\GanttController;
use Utils\Action;
use Utils\Form;
use Utils\PageName;
use Utils\Project;
use Utils\Task;
use Utils\User;

class GanttView extends GanttController
{
    private $taskRows = array();
    private $dayHeader = null;
    private $dateHeader = null;
    private $html = array();

    public function __toString()
    {
        if (isset($this->projectID)) {
            $this->createGanttChart();
        } else {
            $this->selectProject();
        }
        return implode("\n", $this->html);
    }

    // Draw Gantt chart function
    private function createGanttChart()
    {
        $this->createDayDateHeaders();
        $this->createTaskRows();
        $this->createGanttTable();
    }

    // Create the Gantt chart day and date headers via the stored parsed data
    private function createDayDateHeaders()
    {
        $this->dayHeader = '<th class="side-blank-chart-day"></th>';
        $this->dateHeader = '<th class="side-heading">Task : <span class = "emphasis">Owner</span></th>';
        for ($i = 0; $i < $this->numDays; $i++) {
            $startDayTag = '<th class="' . $this->dayClassifications[$i][0] . '">';
            $startDateTag = '<th class="' . $this->dateClassifications[$i][0] . '">';
            $this->dayHeader .= $startDayTag . $this->dayClassifications[$i][1] . '</th>';       // Construct Gantt table day header
            $this->dateHeader .= $startDateTag . $this->dateClassifications[$i][1] . '</th>';    // Construct Gantt table date header
        }
    }

    // Create task row data
    private function createTaskRows()
    {
        $index = 0;
        foreach ($this->taskData as $task) {

            // Add task details
            $row = '<tr><td class="side-name">' . $task[Task::Name] . ' : <span class = "emphasis">' . $task[Task::Owner] . '</span></td>';

            // Add before task padding days
            $row .= $this->addPaddingDays(0, $task[Task::Start]);

            // Add task details
            if ($index == 0) {
                $row .= '<td colspan ="' . ($task[Task::End] - $task[Task::Start] + 1) . '" class="task-start">';
            } else {
                $row .= '<td colspan ="' . ($task[Task::End] - $task[Task::Start] + 1) . '">';
            }
            $index += 1;
            //$row .= '<td colspan ="' . ($task[Task::End] - $task[Task::Start] + 1) . '">';
            $row .= '<div class ="chart-task"><div class="chart-fill" style="width: ' . $task[Task::Percent] .'%">';
            $row .= '</div></div></td>';

            // Add after task padding days
            $row .= $this->addPaddingDays($task[Task::End] + 1, $this->numDays)  . '</tr>';

            // Add Task update / delete / notes in row under task detail
            $this->canEditTask = ($this->canDeleteTask || ($_SESSION[User::Role] == User::RoleMember) && $_SESSION[User::Email] == $task[Task::Email]);
            $row .= '<tr class="task-notes"><td colspan ="'. ($this->numDays+1) . '">';
            if ($this->canEditTask) $row .= '<a href="index.php?page='. PageName::Task .'&action='. Action::Update .'&'. Task::ID . '=' . $task[Task::ID] . '&'. Project::ID .'=' . $this->projectID . '">Update</a>';
            if ($this->canDeleteTask) $row .= '<a href="index.php?page='. PageName::Task .'&action='. Action::Delete .'&'. Task::ID . '=' . $task[Task::ID] . '&'. Project::ID .'=' . $this->projectID . '">Delete</a>';
            $row .= '<span>Task Notes: ' . $task[Task::Notes] . '</span>';
            $row .= '</td></tr>';

            $this->taskRows[] = $row;
        }
    }

    // Used to add cells before and after the tasks
    private function addPaddingDays($start, $end) {
        $padding = null;
        for ($i = $start; $i < $end; $i++) {
            $padding .= '<td class="' . $this->dayClassifications[$i][0] . '">' . '</td>';
        }
        return $padding;
    }

    // Create year, month and day banner
    private function createGanttTable()
    {
        $this->html[] = "<figure>";

        $this->html[] = "<figcaption>Project Title: " . $this->project[Project::Title] . "</figcaption>";

        // Centred Gantt Chart
        $this->html[] = "<div class='chart'>";
        $this->html[] = '<div id="scrollable">';
        $this->html[] = '<table style ="width: ' . (300 + ($this->numDays * 40)) . 'px;">';
        $this->html[] = '<thead>';
        $this->html[] = '<tr>' . $this->createHeaderTags($this->yearStartData, 'chart-year') . '</tr>';
        $this->html[] = '<tr>' . $this->createHeaderTags($this->monthStartData, 'chart-month') . '</tr>';
        $this->html[] = '<tr>' . $this->dayHeader . '</tr>';
        $this->html[] = '<tr>' . $this->dateHeader . '</tr>';
        $this->html[] = '</thead>';
        $this->html[] = '<tbody>';
        foreach ($this->taskRows as $row) {
            $this->html[] = $row;
        }
        $this->html[] = "</tbody>";
        $this->html[] = "</table>";
        $this->html[] = "</div>";

        $this->html[] = "</div>";
        $this->html[] = "</figure>";
    }

    // Create the Gantt chart month and year headers via the stored parsed data
    private function createHeaderTags($periodStartData, $class)
    {
        $periodHeader = '<th class="side-blank-'. $class .'"></th>';
        //$periodHeader = null;
        $numPeriods = sizeof($periodStartData);
        $periodStartData[] = array('End', $this->numDays);
        for ($period = 0; $period < $numPeriods; $period++) {
            $periodStartDay = $periodStartData[$period][1];
            $periodEndDay = $periodStartData[$period + 1][1];
            $periodHeader .= '<th class="' . $class . '" colspan = "' . ($periodEndDay - $periodStartDay) . '">';
            $periodHeader .= $periodStartData[$period][0] . '</th>';
        }
        return $periodHeader;
    }

    private function selectProject() {
        $this->html[] = '<form action ="index.php?page=status" method="get">';
        $this->html[] = '<fieldset>';

        // Title and message
        $this->html = array_merge($this->html, $this->formComponents->header("Project Status", $this->message));

        // Project selection drop down box
        $this->html = array_merge($this->html, $this->formComponents->selectProject('Select Project: ', $this->projects));

        // Submit button
        $this->html = array_merge($this->html, $this->formComponents->submitButton(Form::SubmitSelection, "Select Project"));

        $this->html[] = '</fieldset>';
        $this->html[] = '</form>';
    }
}
